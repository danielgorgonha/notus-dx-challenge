An√°lise Completa dos Exemplos Oficiais da Notus API

Baseado na an√°lise do reposit√≥rio notus-api-examples-main, aqui est√° um resumo detalhado dos exemplos dispon√≠veis e suas implementa√ß√µes:

## üì¶ Estrutura do Monorepo

### Tecnologias Utilizadas
- **Monorepo:** Turborepo para gerenciamento
- **Package Manager:** Bun
- **Frontend:** Next.js, React 19, TypeScript
- **Styling:** Tailwind CSS, Radix UI
- **Autentica√ß√£o:** Privy, Web3Auth
- **Blockchain:** Viem para intera√ß√µes

### Packages Compartilhados
- **packages/ui/:** Componentes reutiliz√°veis React + Tailwind + Radix UI
- **packages/typescript-config/:** Configura√ß√µes TypeScript compartilhadas

## üöÄ Exemplos Dispon√≠veis

### 1. Privy Next.js Notus API
**Localiza√ß√£o:** examples/privy-nextjs-notus-api/

#### Funcionalidades Demonstradas
- Account abstraction via Notus API
- Smart contract interactions
- Web3 wallet connection
- Transaction management

#### Implementa√ß√£o T√©cnica
```typescript
// Configura√ß√£o da API Notus
export const notusAPI = ky.create({
  prefixUrl: "https://api.notus.team/api/v1",
  headers: {
    "x-api-key": env.NOTUS_API_KEY,
  },
});

// Factory Address para Smart Wallets
export const FACTORY_ADDRESS = "0x7a1dbab750f12a90eb1b60d2ae3ad17d4d81effe";
```

#### Fluxo de Autentica√ß√£o
```typescript
export async function auth() {
  // 1. Obter token Privy dos cookies
  const token = get("privy-id-token");
  
  // 2. Buscar/criar usu√°rio no Privy
  let user = await privy.getUser({ idToken: token.value });
  if (!user.wallet?.address) {
    user = await privy.createWallets({
      userId: user.id,
      createEthereumWallet: true,
    });
  }
  
  // 3. Verificar/registrar Smart Wallet na Notus
  const { wallet } = await notusAPI.get("wallets/address", {
    searchParams: {
      externallyOwnedAccount: user.wallet?.address,
      factory: FACTORY_ADDRESS,
    },
  });
  
  // 4. Registrar se n√£o existir
  if (!wallet.registeredAt) {
    await notusAPI.post("wallets/register", {
      json: {
        externallyOwnedAccount: user.wallet?.address,
        factory: FACTORY_ADDRESS,
        salt: "0",
      },
    });
  }
  
  return {
    ...user,
    accountAbstractionAddress: wallet.accountAbstraction,
  };
}
```

### 2. Fiat KYC Next.js Notus API
**Localiza√ß√£o:** examples/fiat-kyc-nextjs-notus-api/

#### Funcionalidades Demonstradas
- KYC Verification API (verifica√ß√£o de identidade)
- Smart Wallet API (account abstraction)
- Fiat Operations API (onramp/offramp com BRL)

#### Arquitetura de Implementa√ß√£o
- **Server Actions:** Para opera√ß√µes server-side
- **HTTP Layer:** Camada de abstra√ß√£o para chamadas da API
- **Schemas:** Valida√ß√£o de dados com TypeScript

#### Fluxo KYC Completo
```typescript
// 1. Criar sess√£o KYC
export async function createStandardIndividualSession(data) {
  const response = await fetch(
    "https://api.notus.team/api/v1/kyc/individual-verification-sessions/standard",
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        ...data,
        livenessRequired: false,
      }),
    }
  );
  
  return await response.json();
}

// 2. Upload de documentos via URLs pr√©-assinadas
export async function uploadFile({ file, url, fields }) {
  const formData = new FormData();
  for (const [key, value] of Object.entries(fields)) {
    formData.append(key, value);
  }
  formData.append("file", file);
  
  return await fetch(url, {
    method: "POST",
    body: formData,
  });
}
```

#### Fluxo de Dep√≥sito Fiat (Onramp)
1. **Request Quote:** Solicitar cota√ß√£o de dep√≥sito
2. **Create Order:** Criar ordem com detalhes PIX
3. **Complete Payment:** Usu√°rio faz pagamento PIX
4. **Auto Transfer:** Crypto enviada automaticamente para wallet

#### Fluxo de Saque Fiat (Offramp)
1. **Request Quote:** Solicitar cota√ß√£o de saque
2. **Smart Wallet Setup:** Configurar smart wallet
3. **Create Order:** Criar ordem com detalhes banc√°rios
4. **Sign & Execute:** Assinar e executar transa√ß√£o

### 3. Web3Auth Wagmi
**Localiza√ß√£o:** examples/web3auth-wagmi/

#### Funcionalidades
- Integra√ß√£o com Web3Auth
- Wagmi para intera√ß√µes blockchain
- Vite + React setup

### 4. KYC React Native
**Localiza√ß√£o:** examples/kyc-react-native/

#### Funcionalidades
- KYC em aplica√ß√£o mobile
- Upload de documentos
- Verifica√ß√£o de identidade

### 5. Liveness KYC SDK
**Localiza√ß√£o:** examples/liveness-kyc-sdk-notus-api/

#### Funcionalidades
- Verifica√ß√£o de liveness
- SDK para KYC
- Integra√ß√£o com Notus API

## üîß Padr√µes de Implementa√ß√£o Identificados

### 1. Configura√ß√£o da API
```typescript
// Padr√£o consistente em todos os exemplos
const notusAPI = ky.create({
  prefixUrl: "https://api.notus.team/api/v1",
  headers: {
    "x-api-key": process.env.NOTUS_API_KEY,
  },
});
```

### 2. Factory Address
```typescript
// Endere√ßo padr√£o para Smart Wallets
export const FACTORY_ADDRESS = "0x7a1dbab750f12a90eb1b60d2ae3ad17d4d81effe";
```

### 3. Estrutura de Server Actions
```typescript
export async function actionName(data: SchemaType) {
  try {
    const result = await apiCall(data);
    return {
      success: true,
      data: result,
      error: null,
    } as const;
  } catch (error) {
    return {
      success: false,
      error: error.message,
      data: null,
    } as const;
  }
}
```

### 4. Tratamento de Erros
- Try/catch consistente
- Retorno padronizado com success/error/data
- Logging de erros no console

## üåç Recursos Suportados

### Moedas e Pa√≠ses
- **Fiat:** BRL (Real Brasileiro), USD
- **Crypto:** USDC, BRZ
- **Pa√≠ses:** Brasil, Estados Unidos
- **Documentos:** RG, Passaporte, CNH

### Blockchains
- Ethereum Mainnet
- Sepolia Testnet
- Polygon (impl√≠cito nos exemplos)

### M√©todos de Pagamento
- PIX (Brasil)
- Transfer√™ncia banc√°ria

## üìö Implica√ß√µes para o Notus DX Challenge

### Exemplos Mais Relevantes
1. **privy-nextjs-notus-api:** Base para autentica√ß√£o e smart wallets
2. **fiat-kyc-nextjs-notus-api:** Implementa√ß√£o completa de KYC e fiat operations

### Padr√µes a Seguir
1. **Server Actions** para opera√ß√µes server-side
2. **HTTP Layer** para abstra√ß√£o da API
3. **Schemas** para valida√ß√£o de dados
4. **Error Handling** padronizado
5. **Factory Address** consistente

### Funcionalidades a Implementar
1. **Smart Wallet Management** (baseado no exemplo Privy)
2. **KYC Flow** (baseado no exemplo fiat-kyc)
3. **Fiat Operations** (onramp/offramp)
4. **Transaction Management** (gasless operations)

### Estrutura de Projeto Recomendada
```
src/
‚îú‚îÄ‚îÄ actions/          # Server Actions
‚îú‚îÄ‚îÄ http/            # HTTP layer para API calls
‚îú‚îÄ‚îÄ lib/             # Utilities e configura√ß√µes
‚îú‚îÄ‚îÄ components/      # Componentes React
‚îî‚îÄ‚îÄ app/            # Next.js App Router
```

Os exemplos oficiais fornecem uma base s√≥lida e padr√µes consistentes para implementar todas as funcionalidades necess√°rias para o Notus DX Challenge, especialmente as trilhas B e C com foco em swaps, transfers e liquidity pools.
