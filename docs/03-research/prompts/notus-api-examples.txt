An√°lise Completa dos Exemplos Oficiais da Notus API

Baseado na an√°lise do reposit√≥rio notus-api-examples-main, aqui est√° um resumo detalhado dos exemplos dispon√≠veis e suas implementa√ß√µes:

## üì¶ Estrutura do Monorepo

### Tecnologias Utilizadas
- **Monorepo:** Turborepo para gerenciamento
- **Package Manager:** Bun
- **Frontend:** Next.js, React 19, TypeScript
- **Styling:** Tailwind CSS, Radix UI
- **Autentica√ß√£o:** Privy, Web3Auth
- **Blockchain:** Viem para intera√ß√µes

### Packages Compartilhados
- **packages/ui/:** Componentes reutiliz√°veis React + Tailwind + Radix UI
- **packages/typescript-config/:** Configura√ß√µes TypeScript compartilhadas

## üöÄ Exemplos Dispon√≠veis

### 1. Privy Next.js Notus API
**Localiza√ß√£o:** examples/privy-nextjs-notus-api/

#### Funcionalidades Demonstradas
- Account abstraction via Notus API
- Smart contract interactions
- Web3 wallet connection
- Transaction management

#### Implementa√ß√£o T√©cnica
```typescript
// Configura√ß√£o da API Notus
export const notusAPI = ky.create({
  prefixUrl: "https://api.notus.team/api/v1",
  headers: {
    "x-api-key": env.NOTUS_API_KEY,
  },
});

// Factory Address para Smart Wallets
export const FACTORY_ADDRESS = "0x7a1dbab750f12a90eb1b60d2ae3ad17d4d81effe";
```

#### Fluxo de Autentica√ß√£o
```typescript
export async function auth() {
  // 1. Obter token Privy dos cookies
  const token = get("privy-id-token");
  
  // 2. Buscar/criar usu√°rio no Privy
  let user = await privy.getUser({ idToken: token.value });
  if (!user.wallet?.address) {
    user = await privy.createWallets({
      userId: user.id,
      createEthereumWallet: true,
    });
  }
  
  // 3. Verificar/registrar Smart Wallet na Notus
  const { wallet } = await notusAPI.get("crypto/wallets/address", {
    searchParams: {
      externallyOwnedAccount: user.wallet?.address,
      factory: FACTORY_ADDRESS,
    },
  });
  
  // 4. Registrar se n√£o existir
  if (!wallet.registeredAt) {
    await notusAPI.post("crypto/wallets/register", {
      json: {
        externallyOwnedAccount: user.wallet?.address,
        factory: FACTORY_ADDRESS,
        salt: "0",
      },
    });
  }
  
  return {
    ...user,
    accountAbstractionAddress: wallet.accountAbstraction,
  };
}
```

### 2. Fiat KYC Next.js Notus API
**Localiza√ß√£o:** examples/fiat-kyc-nextjs-notus-api/

#### Funcionalidades Demonstradas
- KYC Verification API (verifica√ß√£o de identidade)
- Smart Wallet API (account abstraction)
- Fiat Operations API (onramp/offramp com BRL)

#### Arquitetura de Implementa√ß√£o
- **Server Actions:** Para opera√ß√µes server-side
- **HTTP Layer:** Camada de abstra√ß√£o para chamadas da API
- **Schemas:** Valida√ß√£o de dados com TypeScript

#### Fluxo KYC Completo
```typescript
// 1. Criar sess√£o KYC
export async function createStandardIndividualSession(data) {
  const response = await fetch(
    "https://api.notus.team/api/v1/kyc/individual-verification-sessions/standard",
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        firstName: "Jo√£o",
        lastName: "Silva",
        birthDate: "1990-01-01",
        documentCategory: "PASSPORT",
        documentCountry: "BRAZIL",
        documentId: "12345678901",
        nationality: "BRAZILIAN",
        livenessRequired: true,
        email: "joao@example.com",
        address: "Rua das Flores, 123",
        city: "S√£o Paulo",
        state: "SP",
        postalCode: "01234-567"
      }),
    }
  );
  
  return await response.json();
}

// 2. Upload de documentos via URLs pr√©-assinadas
export async function uploadFile({ file, url, fields }) {
  const formData = new FormData();
  for (const [key, value] of Object.entries(fields)) {
    formData.append(key, value);
  }
  formData.append("file", file);
  
  return await fetch(url, {
    method: "POST",
    body: formData,
  });
}

// 3. Obter resultado da sess√£o KYC
export async function getKYCResult(sessionId) {
  const response = await fetch(
    `https://api.notus.team/api/v1/kyc/individual-verification-sessions/standard/${sessionId}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 4. Processar sess√£o KYC
export async function processKYCSession(sessionId) {
  const response = await fetch(
    `https://api.notus.team/api/v1/kyc/individual-verification-sessions/standard/${sessionId}/process`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  // Retorna 204 No Content em caso de sucesso
  return response.status === 204;
}
```

#### Fluxo de Liquidity Pools
```typescript
// 1. Criar liquidez em um pool
export async function createLiquidity(data) {
  const response = await fetch(
    "https://api.notus.team/api/v1/liquidity/create",
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        liquidityProvider: "UNISWAP_V3",
        walletAddress: "0x6e397ddf51d9f15dbe0414538e7529f51f2e5464",
        toAddress: "0x1337133713371337133713371337133713371337",
        chainId: 42161,
        transactionFeePercent: 5,
        payGasFeeToken: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
        gasFeePaymentMethod: "ADD_TO_AMOUNT",
        token0: "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f",
        token1: "0xaf88d065e77c8cc2239327c5edb3a432268e5831",
        poolFeePercent: 1,
        token0Amount: "26.2345",
        token1Amount: "1823.2",
        minPrice: 83475.12,
        maxPrice: 102300.5,
        slippage: 0.5,
        metadata: {
          key: "value"
        }
      }),
    }
  );
  
  return await response.json();
}

// 2. Alterar liquidez em um pool
export async function changeLiquidity(data) {
  const response = await fetch(
    "https://api.notus.team/api/v1/liquidity/change",
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        liquidityProvider: "UNISWAP_V3",
        walletAddress: "0x6e397ddf51d9f15dbe0414538e7529f51f2e5464",
        chainId: 42161,
        payGasFeeToken: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
        gasFeePaymentMethod: "ADD_TO_AMOUNT",
        transactionFeePercent: 5,
        tokenId: "2375619234",
        change: {
          token0: "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f",
          token1: "0xaf88d065e77c8cc2239327c5edb3a432268e5831",
          token0Amount: "26.2345",
          token1Amount: "1823.2",
          slippage: 0.5
        },
        metadata: {
          key: "value"
        }
      }),
    }
  );
  
  return await response.json();
}

// 2. Coletar taxas de liquidez
export async function collectLiquidityFees(data) {
  const response = await fetch(
    "https://api.notus.team/api/v1/liquidity/collect",
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        liquidityProvider: "UNISWAP_V3",
        chainId: 42161,
        nftId: "2375619234",
        walletAddress: "0x6e397ddf51d9f15dbe0414538e7529f51f2e5464",
        payGasFeeToken: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
        metadata: {
          key: "value"
        }
      }),
    }
  );
  
  return await response.json();
}

// 3. Obter quantidades necess√°rias para liquidez
export async function getLiquidityAmounts(params) {
  const queryParams = new URLSearchParams({
    liquidityProvider: "UNISWAP_V3",
    chainId: "42161",
    token0: "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f",
    token1: "0xaf88d065e77c8cc2239327c5edb3a432268e5831",
    poolFeePercent: "1",
    token0MaxAmount: "100",
    token1MaxAmount: "100",
    minPrice: "83475.12",
    maxPrice: "102300.5",
    payGasFeeToken: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
    gasFeePaymentMethod: "ADD_TO_AMOUNT",
    ...params
  });

  const response = await fetch(
    `https://api.notus.team/api/v1/liquidity/amounts?${queryParams}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 4. Obter detalhes de um pool de liquidez
export async function getLiquidityPool(poolId, rangeInDays = 30) {
  const response = await fetch(
    `https://api.notus.team/api/v1/liquidity/pools/${poolId}?rangeInDays=${rangeInDays}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 5. Listar pools de liquidez
export async function listLiquidityPools(params = {}) {
  const queryParams = new URLSearchParams({
    take: "10",
    offset: "0",
    chainIds: "42161",
    tokensAddresses: "0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f",
    filterWhitelist: "true",
    rangeInDays: "30",
    ...params
  });

  const response = await fetch(
    `https://api.notus.team/api/v1/liquidity/pools?${queryParams}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 6. Criar transa√ß√£o de dep√≥sito para smart wallet
export async function createDepositTransaction(walletAddress, amount, chainId, token, fromAddress) {
  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/${walletAddress}/deposit`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        amount,
        chainId,
        token,
        fromAddress
      })
    }
  );
  
  return await response.json();
}

// 7. Obter detalhes de uma smart wallet
export async function getSmartWallet(externallyOwnedAccount, factory, salt = null, eip7702 = false) {
  const queryParams = new URLSearchParams({
    externallyOwnedAccount,
    factory
  });
  
  if (salt !== null) {
    queryParams.append('salt', salt);
  }
  
  if (eip7702) {
    queryParams.append('eip7702', 'true');
  }

  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/address?${queryParams}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 8. Obter portfolio de uma smart wallet
export async function getSmartWalletPortfolio(walletAddress) {
  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/${walletAddress}/portfolio`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 9. Listar todas as smart wallets do projeto
export async function getSmartWalletsByProject() {
  const response = await fetch(
    `https://api.notus.team/api/v1/wallets`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 10. Registrar uma nova smart wallet
export async function registerSmartWallet(externallyOwnedAccount, factory, salt = null, eip7702 = false, metadata = {}) {
  const body = {
    externallyOwnedAccount,
    factory
  };
  
  if (salt !== null) {
    body.salt = salt;
  }
  
  if (eip7702) {
    body.eip7702 = true;
  }
  
  if (Object.keys(metadata).length > 0) {
    body.metadata = metadata;
  }

  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/register`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify(body)
    }
  );
  
  return await response.json();
}

// 11. Obter hist√≥rico de transa√ß√µes de uma smart wallet
export async function getSmartWalletHistory(walletAddress, params = {}) {
  const queryParams = new URLSearchParams();
  
  // Par√¢metros opcionais
  if (params.take) queryParams.append('take', params.take);
  if (params.lastId) queryParams.append('lastId', params.lastId);
  if (params.userOperationHash) queryParams.append('userOperationHash', params.userOperationHash);
  if (params.transactionHash) queryParams.append('transactionHash', params.transactionHash);
  if (params.chainInId) queryParams.append('chainInId', params.chainInId);
  if (params.chainOutId) queryParams.append('chainOutId', params.chainOutId);
  if (params.createdAtLatest) queryParams.append('createdAtLatest', params.createdAtLatest);
  if (params.createdAtOldest) queryParams.append('createdAtOldest', params.createdAtOldest);
  if (params.metadataKey) queryParams.append('metadataKey', params.metadataKey);
  if (params.metadataValue) queryParams.append('metadataValue', params.metadataValue);
  
  // Arrays
  if (params.type && Array.isArray(params.type)) {
    params.type.forEach(type => queryParams.append('type', type));
  }
  if (params.status && Array.isArray(params.status)) {
    params.status.forEach(status => queryParams.append('status', status));
  }
  if (params.chains && Array.isArray(params.chains)) {
    params.chains.forEach(chain => queryParams.append('chains', chain));
  }

  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/${walletAddress}/history?${queryParams}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
    }
  );
  
  return await response.json();
}

// 12. Atualizar metadados de uma transa√ß√£o
export async function updateTransactionMetadata(transactionId, metadata) {
  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/transactions/${transactionId}/metadata`,
    {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        metadata
      })
    }
  );
  
  return await response.json();
}

// 13. Atualizar metadados de uma wallet
export async function updateWalletMetadata(walletId, metadata) {
  const response = await fetch(
    `https://api.notus.team/api/v1/wallets/${walletId}/metadata`,
    {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify({
        metadata
      })
    }
  );
  
  return await response.json();
}

// 14. Criar cota√ß√£o de swap
export async function createSwap(swapData) {
  const response = await fetch(
    `https://api.notus.team/api/v1/crypto/swap`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify(swapData)
    }
  );
  
  return await response.json();
}

// 15. Criar cota√ß√£o de transfer√™ncia
export async function createTransfer(transferData) {
  const response = await fetch(
    `https://api.notus.team/api/v1/crypto/transfer`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify(transferData)
    }
  );
  
  return await response.json();
}

// 16. Criar opera√ß√£o em lote
export async function createBatchOperation(batchData) {
  const response = await fetch(
    `https://api.notus.team/api/v1/crypto/batch-operations`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify(batchData)
    }
  );
  
  return await response.json();
}

// 17. Criar opera√ß√£o de usu√°rio customizada
export async function createCustomUserOperation(customOperationData) {
  const response = await fetch(
    `https://api.notus.team/api/v1/crypto/custom-user-operation`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify(customOperationData)
    }
  );
  
  return await response.json();
}

// 18. Executar opera√ß√£o de usu√°rio
export async function executeUserOperation(executeData) {
  const response = await fetch(
    `https://api.notus.team/api/v1/crypto/execute-user-op`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      },
      body: JSON.stringify(executeData)
    }
  );
  
  return await response.json();
}

// 19. Obter opera√ß√£o de usu√°rio
export async function getUserOperation(userOperationHash) {
  const response = await fetch(
    `https://api.notus.team/api/v1/crypto/user-operation/${userOperationHash}`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": process.env.NOTUS_API_KEY,
      }
    }
  );
  
  return await response.json();
}
```

#### Fluxo de Dep√≥sito Fiat (Onramp)
1. **Request Quote:** Solicitar cota√ß√£o de dep√≥sito
2. **Create Order:** Criar ordem com detalhes PIX
3. **Complete Payment:** Usu√°rio faz pagamento PIX
4. **Auto Transfer:** Crypto enviada automaticamente para wallet

#### Fluxo de Saque Fiat (Offramp)
1. **Request Quote:** Solicitar cota√ß√£o de saque
2. **Smart Wallet Setup:** Configurar smart wallet
3. **Create Order:** Criar ordem com detalhes banc√°rios
4. **Sign & Execute:** Assinar e executar transa√ß√£o

### 3. Web3Auth Wagmi
**Localiza√ß√£o:** examples/web3auth-wagmi/

#### Funcionalidades
- Integra√ß√£o com Web3Auth
- Wagmi para intera√ß√µes blockchain
- Vite + React setup

### 4. KYC React Native
**Localiza√ß√£o:** examples/kyc-react-native/

#### Funcionalidades
- KYC em aplica√ß√£o mobile
- Upload de documentos
- Verifica√ß√£o de identidade

### 5. Liveness KYC SDK
**Localiza√ß√£o:** examples/liveness-kyc-sdk-notus-api/

#### Funcionalidades
- Verifica√ß√£o de liveness
- SDK para KYC
- Integra√ß√£o com Notus API

## üîß Padr√µes de Implementa√ß√£o Identificados

### 1. Configura√ß√£o da API
```typescript
// Padr√£o consistente em todos os exemplos
const notusAPI = ky.create({
  prefixUrl: "https://api.notus.team/api/v1",
  headers: {
    "x-api-key": process.env.NOTUS_API_KEY,
  },
});
```

### 2. Factory Address
```typescript
// Endere√ßo padr√£o para Smart Wallets
export const FACTORY_ADDRESS = "0x7a1dbab750f12a90eb1b60d2ae3ad17d4d81effe";
```

### 3. Estrutura de Server Actions
```typescript
export async function actionName(data: SchemaType) {
  try {
    const result = await apiCall(data);
    return {
      success: true,
      data: result,
      error: null,
    } as const;
  } catch (error) {
    return {
      success: false,
      error: error.message,
      data: null,
    } as const;
  }
}
```

### 4. Tratamento de Erros
- Try/catch consistente
- Retorno padronizado com success/error/data
- Logging de erros no console

## üåç Recursos Suportados

### Moedas e Pa√≠ses
- **Fiat:** BRL (Real Brasileiro), USD
- **Crypto:** USDC, BRZ
- **Pa√≠ses:** Brasil, Estados Unidos
- **Documentos:** RG, Passaporte, CNH

### Blockchains
- Ethereum Mainnet
- Sepolia Testnet
- Polygon (impl√≠cito nos exemplos)

### M√©todos de Pagamento
- PIX (Brasil)
- Transfer√™ncia banc√°ria

## üìö Implica√ß√µes para o Notus DX Challenge

### Exemplos Mais Relevantes
1. **privy-nextjs-notus-api:** Base para autentica√ß√£o e smart wallets
2. **fiat-kyc-nextjs-notus-api:** Implementa√ß√£o completa de KYC e fiat operations

### Padr√µes a Seguir
1. **Server Actions** para opera√ß√µes server-side
2. **HTTP Layer** para abstra√ß√£o da API
3. **Schemas** para valida√ß√£o de dados
4. **Error Handling** padronizado
5. **Factory Address** consistente

### Funcionalidades a Implementar
1. **Smart Wallet Management** (baseado no exemplo Privy)
2. **KYC Flow** (baseado no exemplo fiat-kyc)
3. **Fiat Operations** (onramp/offramp)
4. **Transaction Management** (gasless operations)

### Estrutura de Projeto Recomendada
```
src/
‚îú‚îÄ‚îÄ actions/          # Server Actions
‚îú‚îÄ‚îÄ http/            # HTTP layer para API calls
‚îú‚îÄ‚îÄ lib/             # Utilities e configura√ß√µes
‚îú‚îÄ‚îÄ components/      # Componentes React
‚îî‚îÄ‚îÄ app/            # Next.js App Router
```

Os exemplos oficiais fornecem uma base s√≥lida e padr√µes consistentes para implementar todas as funcionalidades necess√°rias para o Notus DX Challenge, especialmente as trilhas B e C com foco em swaps, transfers e liquidity pools.
