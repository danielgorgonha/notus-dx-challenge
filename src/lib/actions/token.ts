/**
 * Token Actions
 * Server Actions para opera√ß√µes relacionadas a tokens
 */

'use server';

import { listTokens } from './blockchain';

/**
 * Busca informa√ß√µes detalhadas de um token espec√≠fico
 * Usa o par√¢metro search da API Notus para buscar diretamente por s√≠mbolo
 */
export async function getTokenBySymbol(symbol: string) {
  try {
    console.log('üîç Buscando token por s√≠mbolo:', symbol);
    
    // Usar o par√¢metro search da API Notus para buscar diretamente
    const response = await listTokens({
      page: 1,
      perPage: 10, // Reduzir j√° que estamos buscando por s√≠mbolo espec√≠fico
      orderBy: 'marketCap',
      orderDir: 'desc',
      search: symbol, // Buscar diretamente pelo s√≠mbolo na API
    });

    // A API pode retornar m√∫ltiplos resultados, buscar o que corresponde exatamente
    const token = response.tokens?.find(
      (t) => t.symbol?.toUpperCase() === symbol.toUpperCase()
    );

    if (token) {
      console.log('‚úÖ Token encontrado:', token.symbol, token.name, token.priceUsd);
    } else {
      console.log('‚ö†Ô∏è Token n√£o encontrado na primeira busca, tentando sem search...');
      
      // Se n√£o encontrou com search, tentar buscar sem filtro (pode estar em outra p√°gina)
      const fallbackResponse = await listTokens({
        page: 1,
        perPage: 100,
        orderBy: 'marketCap',
        orderDir: 'desc',
      });
      
      const fallbackToken = fallbackResponse.tokens?.find(
        (t) => t.symbol?.toUpperCase() === symbol.toUpperCase()
      );
      
      if (fallbackToken) {
        console.log('‚úÖ Token encontrado no fallback:', fallbackToken.symbol);
        return fallbackToken;
      }
    }

    return token || null;
  } catch (error) {
    console.error('‚ùå Erro ao buscar token:', error);
    return null;
  }
}

/**
 * Busca informa√ß√µes detalhadas de um token por endere√ßo
 */
export async function getTokenByAddress(address: string, chainId?: number) {
  try {
    const response = await listTokens({
      page: 1,
      perPage: 100,
      orderBy: 'marketCap',
      orderDir: 'desc',
    });

    const token = response.tokens?.find(
      (t) => 
        t.address?.toLowerCase() === address.toLowerCase() &&
        (!chainId || t.chain?.id === chainId)
    );

    return token || null;
  } catch (error) {
    console.error('‚ùå Erro ao buscar token:', error);
    return null;
  }
}

